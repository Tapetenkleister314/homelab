# Docker Compose file for running paperless from the docker container registry.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8000.
#
# In addition to that, this Docker Compose file adds the following optional
# configurations:
#
# - Instead of SQLite (default), PostgreSQL is used as the database server.
# - Apache Tika and Gotenberg servers are started with paperless and paperless
#   is configured to use these services. These provide support for consuming
#   Office documents (Word, Excel, Power Point and their LibreOffice counter-
#   parts.
#
# To install and update paperless with this file, do the following:
#
# - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'
#   and '.env' into a folder.
# - Run 'docker compose pull'.
# - Run 'docker compose up -d'.
#
# For more extensive installation and update instructions, refer to the
# documentation.

services:
  redis:
    image: docker.io/library/redis:latest
    container_name: paperless-redis
    restart: unless-stopped

    networks:
      default:
        ipv4_address: 192.168.178.207
    volumes:
      - CHANGE_TO_COMPOSE_DATA_PATH/paperless/redis:/usr/local/etc/redis

  db:
    image: docker.io/library/postgres:17
    restart: unless-stopped
    volumes:
      - CHANGE_TO_COMPOSE_DATA_PATH/paperless/pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
      
  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperlessngx
    restart: unless-stopped
    depends_on:
      - db
      - redis
      - gotenberg
      - tika
    ports:
      - 8010:8000
    volumes:
      - CHANGE_TO_COMPOSE_DATA_PATH/paperless/data:/usr/src/paperless/data
      - CHANGE_TO_COMPOSE_DATA_PATH/paperless/media:/usr/src/paperless/media
      - CHANGE_TO_COMPOSE_DATA_PATH/paperless/export:/usr/src/paperless/export
      - CHANGE_TO_COMPOSE_DATA_PATH/consume:/usr/src/paperless/consume
    environment:
      PAPERLESS_REDIS: redis://192.168.178.207:6379
      PUID: 1000
      PGID: 1000
      USERMAP_UID: 1000
      USERMAP_GID: 1000
      PAPERLESS_TIME_ZONE: Europe/Berlin
      PAPERLESS_ADMIN_USER: admin
      PAPERLESS_ADMIN_PASSWORD: GEHEIM # change in Browser! Check for hash!
      PAPERLESS_OCR_LANGUAGE: deu+eng
      PAPERLESS_DBHOST: db
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://192.168.178.205:3000
      PAPERLESS_TIKA_ENDPOINT: http://192.168.178.206:9998
    networks:
        default:
            ipv4_address: 192.168.178.204

  gotenberg:
    image: gotenberg/gotenberg
    restart: unless-stopped
    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    container_name: gotenberg
    ports:
      - 3044:3000
    networks:
      default:
        ipv4_address: 192.168.178.205
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"

  tika:
    image: ghcr.io/paperless-ngx/tika
    container_name: tika
    ports:
      - 9998:9998
    networks:
      default:
        ipv4_address: 192.168.178.206
    restart: unless-stopped

networks:
  default:
    name: local_network # use MacVLAN Network
    external: true

# volumes:
#   data:
#   media:
#   redisdata:
